// Bruteforce approach

#include <bits/stdc++.h>
int balancedBTs(int n) {
    // Write your code here
    if(n <= 1){
        return 1;
    }
    
    int mod = (int)pow(10,9)+7;
    int x = balancedBTs(n-1);
    int y = balancedBTs(n-2);
    
    int temp1 = int(((long)(x)*x) % mod );
    int temp2 = int(2*(long)(x)*y % mod);
    
    int ans = (temp1 + temp2) % mod;
    
    return ans;
}

// Memoization approach

#include <bits/stdc++.h>
int helper(int n, int* ans){
    if(n <= 1){
        return ans[n];
    }
    
    if(ans[n] != -1){
        return ans[n];
    } 
    
    int x = helper(n-1,ans);
    int y = helper(n-2, ans);
    
    int mod = (int)(pow(10,9)+7);
    
    int temp1 = int((long)(x) * x % mod);
    int temp2 = int(2*(long)(x)*y % mod);
    
    int ans1 = (temp1 + temp2)%mod;
    
    ans[n] = ans1;
    
    return ans1;
}


int balancedBTs(int n) {
    // Write your code here
    
    int *ans = new int[n+1];
    
    ans[0] = 1;
    ans[1] = 1;
    for(int i=2; i<= n; i++){
        ans[i] = -1;
    }
    
    return helper(n,ans);
}

// Dp solution

int balancedBTs(int n) {
    // Write your code here
    
    int *ans = new int[n+1];
    
    ans[0] = 1;
    ans[1] = 1;
    int mod = (int)(pow(10,9)+7);
    
    for(int i=2; i<= n; i++){
        int x = ans[i-1];
        int y = ans[i-2];
    
    
        int temp1 = int((long)(x) * x % mod);
        int temp2 = int(2*(long)(x)*y % mod);
    
        int ans1 = (temp1 + temp2)%mod;
        ans[i] = ans1;
    }
    
    return ans[n];
}
