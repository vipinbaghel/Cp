// Brute force

int helper(int **input, int m, int n, int row, int col){
    
    if(row>=m || col >= n){
        return INT_MAX;
    }
    
    if(row == m-1 && col == n-1){
        return input[row][col];
    }
    
    int x = helper(input,m,n,row+1,col);
    int y = helper(input,m,n,row,col+1);
    
    int z = helper(input,m,n,row+1,col+1);
    
    return min(x,min(y,z))+input[row][col];
}


int minCostPath(int **input, int m, int n)
{
	//Write your code here
    return helper(input,m,n,0,0);
}

//Memoization approach
int helper(int **input, int m, int n, int row, int col, int **ans){
    
    if(row>=m || col >= n){
        return INT_MAX;
    }
    
    if(row == m-1 && col == n-1){
        return input[row][col];
    }
    
    if(ans[row][col] != -1){
        return ans[row][col];
    }
    
    int x = helper(input,m,n,row+1,col,ans);
    int y = helper(input,m,n,row,col+1,ans);
    
    int z = helper(input,m,n,row+1,col+1,ans);
    ans[row][col] = min(x,min(y,z))+input[row][col];
    
    return min(x,min(y,z))+input[row][col];
}


int minCostPath(int **input, int m, int n)
{
	//Write your code here
    int **ans = new int*[m+1];
    for(int i=0; i<=m; i++){
        ans[i] = new int[n+1];
        for(int j=0; j<=n; j++){
            ans[i][j] = -1;
        }
    }
    
    
        
    return helper(input,m,n,0,0,ans);
}

// Using Dp
