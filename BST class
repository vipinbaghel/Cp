class BST {
    // Define the data members
    
    
   private:
    
    BinaryTreeNode<int>* root;
    
    bool search(int data, BinaryTreeNode<int> *root){
        if(root == NULL){
            return false;
        } else if(root->data == data){
            return true;
        } else if(root->data >data){
            return search(data, root->left);
        } else {
            return search(data, root->right);
        }
    }
    
    BinaryTreeNode<int>* insert(int data, BinaryTreeNode<int>* root){
        if(root == NULL){
            BinaryTreeNode<int>* newNode = new BinaryTreeNode<int>(data);
            return newNode;
        }
        
        if(data <= root->data){
            root->left = insert(data, root->left);
        }
        else {
            root->right = insert(data, root->right);
        }
        
        return root;
    }
    
    BinaryTreeNode<int>* remove(int data, BinaryTreeNode<int> *root){
        if(root == NULL){
            return NULL;
        } 
        
        if(root->data > data){
            root->left = remove(data, root->left);
            return root;
        } else if(root->data < data){
            root->right = remove(data, root->right);
            return root;
        } 
        else {
            if(root->left == NULL){
                
                BinaryTreeNode<int> *temp = root->right;
                root->right = NULL;
                delete root;
                return temp;
            } else if(root->right == NULL){
                BinaryTreeNode<int> *temp = root->left;
                root->left = NULL;
                delete root;
                return temp;
            } else {
                BinaryTreeNode<int> *rightMin = root->right;
                while(rightMin->left != NULL){
                    rightMin = rightMin->left;
                }
                
                
                int rightMinData = rightMin->data;
                
                root->data = rightMinData;
                
                root->right = remove(rightMinData, root->right);
                return root;
            }
        }
    }
    
    
    
	void print(BinaryTreeNode<int> *root) {
		if (!root)
			return;

		cout << root->data << ":";

		if (root->left != NULL) {
			cout << "L:" << root->left->data<<",";
		}

		if (root->right != NULL) {
			cout << "R:" << root->right->data;
		}
		cout << endl;

		print(root->left);
		print(root->right);
	}
   public:
    BST() { 
        // Implement the Constructor
        root=NULL;
        
    }

	/*----------------- Public Functions of BST -----------------*/

    void remove(int data) { 
        // Implement the remove() function 
        root = remove(data,root);
    }

    void print() { 
        // Implement the print() function
        print(root);
    }

    void insert(int data) { 
        // Implement the insert() function 
        root = insert(data, root);
    }

    bool search(int data) {
		// Implement the search() function 
        
        return search(data, root);
    }
};
