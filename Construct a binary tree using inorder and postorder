BinaryTreeNode<int>* buildTree_helper(int postorder[],int inorder[], int postStart,int postEnd, int inStart,int inEnd){
    if(postStart > postEnd || inStart > inEnd){
        return NULL;
    }
    
    BinaryTreeNode<int>* root = new BinaryTreeNode<int>(postorder[postEnd]);
    
    int count = 0;
    for(int i=inStart; inorder[i] != root->data; i++){
        count++;
    }
    
    root->left = buildTree_helper(postorder,inorder,postStart,postStart+count-1, inStart,inStart+count-1);
    root->right = buildTree_helper(postorder,inorder,postStart+count,postEnd-1,inStart+count+1,inEnd);
    
    return root;
}

BinaryTreeNode<int>* buildTree(int *postorder, int postLength, int *inorder, int inLength) {
    // Write your code here
    
    return buildTree_helper(postorder,inorder,0,postLength-1,0,inLength-1);
    
}
