BinaryTreeNode<int>* buildTree_helper(int preorder[],int inorder[],int preStart,int preEnd, int inStart,int inEnd){
    if(inStart > inEnd || preStart > preEnd){
        return NULL;
    }
    
    BinaryTreeNode<int> *root = new BinaryTreeNode<int>(preorder[preStart]);
    int count = 0;
    for(int i=inStart; inorder[i] != root->data; i++){
        count++;
    }
    
    root->left = buildTree_helper(preorder,inorder,preStart+1,preStart+count,inStart,inStart+count-1);
    root->right = buildTree_helper(preorder,inorder,preStart+count+1,preEnd,inStart+count+1, inEnd);
    
    return root;
}

BinaryTreeNode<int>* buildTree(int *preorder, int preLength, int *inorder, int inLength) {
    // Write your code here
    
    return buildTree_helper(preorder,inorder,0,preLength-1,0,inLength-1);
}
