#include <string>
#include <vector> 
#include<algorithm>
class TrieNode 
{
   public:
    char data;
    TrieNode **children;
    bool isTerminal;
    int childCount;

    TrieNode(char data) 
    {
        this->data = data;
        children = new TrieNode *[26];
        for (int i = 0; i < 26; i++) 
        {
            children[i] = NULL;
        }
        isTerminal = false;
        childCount = 0;
    }
};

class Trie 
{
    TrieNode *root;

   public:
    int count;

    Trie() 
    {
        this->count = 0;
        root = new TrieNode('\0');
    }
    
    bool search(TrieNode *root, string word)
	{
		if(word.size()==0)
		{
			return true;
		}
		
		int index = word[0] - 'a';
		bool child;
		if(root->children[index] != NULL)
		{
			child = search(root->children[index], word.substr(1));
		}
		else
		{
			return false;
		}
		return child;
	}


    bool add(TrieNode *root, string word) 
    {
        // Base case
        if (word.size() == 0) 
        {
            if (!root->isTerminal) 
            {
                root->isTerminal = true;
                return true;
            } 
            else 
            {
                return false;
            }
        }

        // Small calculation
        int index = word[0] - 'a';
        TrieNode *child;
        if (root->children[index] != NULL) 
        {
            
            child = root->children[index];
        } 
        else 
        {
            child = new TrieNode(word[0]);
            root->children[index] = child;
            root->childCount++;
        }

        // Recursive call
        return add(child, word.substr(1));
    }

    void add(string word) 
    {
        if (add(root, word)) 
        {
            this->count++;
        }
    }
    
    bool search(string word)
	{
		return search(root,word);
	}
    
    bool patternMatching(vector<string> vect, string pattern) 
    {
        for(int i = 0; i< vect.size(); i++)
        {
            for(int j = 0; j < vect[i].length(); j++)
            {
                add(vect[i].substr(j));
            }
        }
        
        return search(pattern);
    }

    /*..................... Palindrome Pair................... */

    bool isPalindromePair(vector<string> vect) 
    {
       for(int i = 0; i< vect.size(); i++)
        {
            for(int j = 0; j < vect[i].length(); j++)
            {
                add(vect[i].substr(j));
            }
        }
        
        for(int i = 0; i< vect.size(); i++)
        {
           reverse(vect[i].begin(),vect[i].end());
            if(search(vect[i]))
            {
                return true;
            }
        }
        return false;
    }
};
