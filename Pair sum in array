void swap(int *a, int *b){
    int temp = *a;
    *a = *b;
    *b = temp;
}


int partition(int arr[], int l, int r){
    int pivot = arr[l];
                    
    int count=0;
    for(int i=l+1; i<=r; i++){
        if(arr[i]<pivot){
            count++;
        }
    }
                    
    int pivotIndex = l+count;
    swap(arr[l],arr[pivotIndex]);
                    
    int i=l;
    int j=r;
    while(i<pivotIndex){
        if(arr[i]<pivot){
            i++;
        } else if(arr[j]>=pivot){
            j--;
        } else {
            swap(arr[i],arr[j]);
            i++;
            j--;
        }
    }
                    
    return pivotIndex;
}

void quickSort(int arr[], int l, int r){
    if(l>=r){
        return;
    }
    
    int pi = partition(arr,l,r);
    quickSort(arr,l,pi-1);
    quickSort(arr,pi+1,r);
}



int pairSum(int *arr, int n, int num)
{
	//Write your code here
    quickSort(arr,0,n-1);
    int numberOfPairs = 0;
    int i=0;
    int j=n-1;
    while(i<j){
        if(arr[i] + arr[j] == num){
            if(arr[i] == arr[j]){
               int c = j-i;
               numberOfPairs = numberOfPairs + (c*(c+1))/2;
               break;
            }
             else{
            		int a=1,b=1;
                 	// Counting all equal left elements
                	while(arr[i]==arr[i+1]){
                    		a++; i++;
                	}
                 	// Counting all equal right elements 
                	while(arr[j]==arr[j-1]){
                    		b++; j--;
                	}
            		numberOfPairs += a*b;
                    i++;j--;
                 
             } 
        }
         else if(arr[i]+arr[j] < num){
            i++;
        } else {
            j--;
        }
    }
    
    return numberOfPairs;
    
}
