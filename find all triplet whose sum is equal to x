oid swap(int *a, int *b){
    int temp = *a;
    *a = *b;
    *b = temp;
}


int partition(int arr[], int l, int r){
    int pivot = arr[l];
                    
    int count=0;
    for(int i=l+1; i<=r; i++){
        if(arr[i]<pivot){
            count++;
        }
    }
                    
    int pivotIndex = l+count;
    swap(arr[l],arr[pivotIndex]);
                    
    int i=l;
    int j=r;
    while(i<pivotIndex){
        if(arr[i]<pivot){
            i++;
        } else if(arr[j]>=pivot){
            j--;
        } else {
            swap(arr[i],arr[j]);
            i++;
            j--;
        }
    }
                    
    return pivotIndex;
}

void quickSort(int arr[], int l, int r){
    if(l>=r){
        return;
    }
    
    int pi = partition(arr,l,r);
    quickSort(arr,l,pi-1);
    quickSort(arr,pi+1,r);
}



int tripletSum(int *arr, int n, int num)
{
	//Write your code here
    quickSort(arr,0,n-1);
    int noOfTriplet = 0;
    for(int i=0; i<n-2; i++){
        int requiredSum = num-arr[i];
        int j=i+1;
        int k=n-1;
        while(j<k){
            if(arr[j] + arr[k] > requiredSum){
                k--;
            } else if(arr[j] + arr[k] < requiredSum){
                j++;
            } else{
                if(arr[j] == arr[k]){
                    int c = k-j;
                    noOfTriplet = noOfTriplet + (c*(c+1))/2;
                    break;
                }
                else {
                    int a = 1;
                    int b = 1;
                    while(arr[j] == arr[j+1]){
                        a++;
                        j++;
                    }
                    
                    while(arr[k] == arr[k-1]){
                        b++;
                        k--;
                    }
                    
                    noOfTriplet+=a*b;
                    j++;
                    k--;
                }
            }
        }
    }
    
    return noOfTriplet;
    
}
